{% extends 'template/jhTemplateV4.html'%}
{% block vueTemplate %}
<!-- 3 table 下 <=$ tableA $=> 的单表 crud 页面 -->

<!--SQL START
-- 以下为 jianghu init 工具生成的参考 SQL，使用后删除
-- 创建 page
INSERT INTO `_page` (`pageId`,`pageName`,`pageType`,`sort`,`operation`,`operationByUserId`,`operationByUser`,`operationAt`) SELECT '<=$ pageId $=>','<=$ nameA $=>页面','showInMenu','5','jhInsert',NULL,NULL,NULL FROM DUAL WHERE NOT EXISTS (SELECT `pageId` FROM `_page` WHERE `pageId`='<=$ pageId $=>');

-- 创建 resource
INSERT INTO `_resource` (`accessControlTable`,`resourceHook`,`pageId`,`actionId`,`desc`,`resourceType`,`appDataSchema`,`resourceData`,`requestDemo`,`responseDemo`,`operation`,`operationByUserId`,`operationByUser`,`operationAt`) SELECT NULL,NULL,'<=$ pageId $=>','selectItemList','✅<=$ nameA $=>查询-查询列表','sql','{}','{ \"table\": \"<=$ table $=>\", \"operation\": \"select\" }',NULL,NULL,'jhInsert',NULL,NULL,NULL FROM DUAL WHERE NOT EXISTS (SELECT `pageId` FROM `_resource` WHERE `pageId`='<=$ pageId $=>' AND `actionId`='selectItemList');
INSERT INTO `_resource` (`accessControlTable`,`resourceHook`,`pageId`,`actionId`,`desc`,`resourceType`,`appDataSchema`,`resourceData`,`requestDemo`,`responseDemo`,`operation`,`operationByUserId`,`operationByUser`,`operationAt`) SELECT NULL,NULL,'<=$ pageId $=>','insertItem','✅<=$ nameA $=>查询-添加成员','sql','{}','{ \"table\": \"<=$ table $=>\", \"operation\": \"jhInsert\" }',NULL,NULL,'jhInsert',NULL,NULL,NULL FROM DUAL WHERE NOT EXISTS (SELECT `pageId` FROM `_resource` WHERE `pageId`='<=$ pageId $=>' AND `actionId`='insertItem');
INSERT INTO `_resource` (`accessControlTable`,`resourceHook`,`pageId`,`actionId`,`desc`,`resourceType`,`appDataSchema`,`resourceData`,`requestDemo`,`responseDemo`,`operation`,`operationByUserId`,`operationByUser`,`operationAt`) SELECT NULL,NULL,'<=$ pageId $=>','updateItem','✅<=$ nameA $=>查询-更新成员','sql','{}','{ \"table\": \"<=$ table $=>\", \"operation\": \"jhUpdate\" }',NULL,NULL,'jhInsert',NULL,NULL,NULL FROM DUAL WHERE NOT EXISTS (SELECT `pageId` FROM `_resource` WHERE `pageId`='<=$ pageId $=>' AND `actionId`='updateItem');
INSERT INTO `_resource` (`accessControlTable`,`resourceHook`,`pageId`,`actionId`,`desc`,`resourceType`,`appDataSchema`,`resourceData`,`requestDemo`,`responseDemo`,`operation`,`operationByUserId`,`operationByUser`,`operationAt`) SELECT NULL,NULL,'<=$ pageId $=>','deleteItem','✅<=$ nameA $=>查询-删除信息','sql','{}','{ \"table\": \"<=$ table $=>\", \"operation\": \"jhDelete\" }',NULL,NULL,'jhInsert',NULL,NULL,NULL FROM DUAL WHERE NOT EXISTS (SELECT `pageId` FROM `_resource` WHERE `pageId`='<=$ pageId $=>' AND `actionId`='deleteItem');
SQL END!-->
<script type="text/html" id="app-template">
    <div>
        <v-app mobile-breakpoint="sm">
            <jh-menu />
            <v-main class="mt-15">
                <!-- 头部内容 >>>>>>>>>>>>> -->
                <div class="jh-page-second-bar px-8">
                    <div class="pt-3 text-h7 font-weight-bold">
                        <=$ pageId $=>
                        <!-- 帮助页按钮 -->
                        <v-icon @click="isHelpPageDrawerShow = true" color="success" small>mdi-help-circle-outline</v-icon>
                    </div>
                    <v-breadcrumbs class="pb-3 pt-0 px-0" :items="breadcrumbs" divider="-"></v-breadcrumbs>
                </div>
                <!-- <<<<<<<<<<<<< 头部内容 -->
    
                <div class="jh-page-body-container px-8">
                    <!-- 页面内容 >>>>>>>>>>>>> -->
                    <v-card class="rounded-lg">
                        <v-row class="ma-0 pa-4">
                            <!--新增按钮-->
                            <v-btn color="success" class="elevation-0 mr-2" @click="doUiAction('startCreateItem')"
                                small>新增</v-btn>
                            <v-spacer></v-spacer>
                            <!--搜索过滤-->
                            <v-col cols="12" xs="8" sm="4" md="3" xl="2" class="pa-0">
                                <v-text-field color="success" v-model="searchInput" prefix="搜索：" class="jh-v-input" dense
                                    filled single-line></v-text-field>
                            </v-col>
                        </v-row>
                        <!--表格-->
                        <v-data-table :headers="headers" :items="tableData" :search="searchInput"
                            :footer-props="{ itemsPerPageOptions: [20, 50, -1], itemsPerPageText: '每页行数', itemsPerPageAllText: '所有'}"
                            :items-per-page="-1" mobile-breakpoint="0" :loading="isTableLoading"
                            checkbox-color="success" fixed-header :class="{'zebraLine': isTableZebraLineShown }"
                            class="jh-fixed-table-height elevation-0 mt-0 mb-xs-4">
                            <template v-slot:header.action="{ header }">
                              <span class="ml-2">操作</span>
                            </template>
                            <!--表格行操作按钮-->
                            <template v-slot:item.operationAt="{ item }">
                              {{ item.operationAt && dayjs(item.operationAt).format('YYYY-MM-DD HH:mm:ss') }}
                            </template>
                            <template v-slot:item.action="{ item }">
                              <v-btn v-for="tableButton of tableButtonList" :color="tableButton.color" outlined x-small class="elevation-0 mr-2" @click="doUiAction(tableButton.action, {item, button: tableButton})">{{ tableButton.text }}</v-btn>
                            </template>
                            <!--没有数据-->
                            <template v-slot:loading>
                              <div class="jh-no-data">数据加载中</div>
                            </template>
                            <template v-slot:no-data>
                              <div class="jh-no-data">暂无数据</div>
                            </template>
                            <template v-slot:no-results>
                              <div class="jh-no-data">暂无数据</div>
                            </template>
                            <!--表格分页-->
                            <template v-slot:footer.page-text="pagination">
                              <span>{{pagination.pageStart}}-{{pagination.pageStop}}</span>
                              <span class="ml-1">共{{pagination.itemsLength}}条</span>
                            </template>
                        </v-data-table>
                    </v-card>
                    <!-- <<<<<<<<<<<<< 页面内容 -->
    
                    <!--新增抽屉-->
                    <v-navigation-drawer v-model="isAddDrawerShow" v-click-outside="drawerClickOutside" fixed temporary
                        right width="80%" class="elevation-24">
                        <v-form ref="createForm" lazy-validation>
                            <!--抽屉标题-->
                            <v-row>
                                <span class="title pa-6 pl-8">添加信息</span>
                            </v-row>
                            <!--抽屉表单-->
                            <v-row class="ma-0" :class="{'px-6': !isMobile, 'px-3': isMobile, 'pb-7': isMobile}">
                              //===// <=% for f in tableAFields %=>
                              <v-col cols="12" sm="12" md="4" xl="3" :class="{'pa-0': isMobile, 'px-4': isMobile, 'pt-6': isMobile}">
                                <span class="inputLabel"><=$ f.COLUMN_COMMENT.split(';')[0] $=></span>
                                <v-text-field class="jh-v-input " dense filled single-line v-model="addItem.<=$ f.COLUMN_NAME $=>"></v-text-field>
                              </v-col>
                              //===// <=% endfor %=>
                            </v-row>
                            <!--抽屉操作按钮-->
                            <v-row class="justify-end mx-0 mt-8 px-6">
                                <v-btn color="success" @click="doUiAction('createItem')" small>保存</v-btn>
                                <v-btn class="ml-2" @click="isAddDrawerShow = false" small>取消</v-btn>
                            </v-row>
                        </v-form>
                        <!--抽屉关闭按钮-->
                        <v-btn elevation="0" color="success" fab absolute top left small tile class="drawer-close-float-btn"
                            @click="isAddDrawerShow = false">
                            <v-icon>mdi-close</v-icon>
                        </v-btn>
                    </v-navigation-drawer>

                    <!--编辑抽屉-->
                    <v-navigation-drawer v-model="isEditDrawerShow" v-click-outside="drawerClickOutside" fixed temporary
                        right width="80%" class="elevation-24">
                        <v-form ref="editForm" lazy-validation>
                            <!--抽屉标题-->
                            <v-row>
                                <span class="title pa-6 pl-8">修改信息</span>
                            </v-row>
                            <!--抽屉表单-->
                            <v-row class="mt-0 px-6">
                              //===// <=% for f in tableAFields %=>
                              <v-col cols="12" sm="12" md="4" xl="3" :class="{'pa-0': isMobile, 'px-4': isMobile, 'pt-6': isMobile}">
                                <span class="inputLabel"><=$ f.COLUMN_COMMENT.split(';')[0] $=></span>
                                <v-text-field class="jh-v-input " dense filled single-line v-model="editItem.<=$ f.COLUMN_NAME $=>"></v-text-field>
                              </v-col>//===// <=% endfor %=>
                            </v-row>
                            <!--抽屉操作按钮-->
                            <v-row class="justify-end mx-0 mt-8 px-6">
                                <v-btn color="success" small @click="doUiAction('updateItem')">保存</v-btn>
                                <v-btn class="ml-2" small @click="isEditDrawerShow = false">取消
                                </v-btn>
                            </v-row>
                        </v-form>
    
                        <!--抽屉关闭按钮-->
                        <v-btn elevation="0" color="success" fab absolute top left small tile class="drawer-close-float-btn"
                            @click="isEditDrawerShow = false">
                            <v-icon>mdi-close</v-icon>
                        </v-btn>
                    </v-navigation-drawer>
                </div>
    
                <!-- 帮助页抽屉 >>>>>>>>>>>>> -->
                <v-navigation-drawer v-model="isHelpPageDrawerShow" v-click-outside="drawerClickOutside" fixed temporary
                    right width="80%" class="elevation-24">
                    <iframe style="border: 0" :src="`/${appInfo.appId}/pageDoc#1.classList.md`" width="100%"
                        height="100%"></iframe>
    
                    <v-btn elevation="0" color="success" fab absolute top left small tile class="drawer-close-float-btn"
                        @click="isHelpPageDrawerShow = false">
                        <v-icon>mdi-close</v-icon>
                    </v-btn>
                </v-navigation-drawer>
                <!-- <<<<<<<<<<<<< 帮助页抽屉 -->
    
            </v-main>
        </v-app>
    
        <jh-toast />
        <jh-mask />
        <jh-confirm-dialog />
    
    </div>
</script>

<div id="app">
</div>

{% endblock %}
{% block vueScript %}

<!-- 加载页面组件 >>>>>>>>>>>>> -->
{% include 'common/jianghuJs/fixedTableHeightV4.html' %}
<!-- <<<<<<<<<<<<< 加载页面组件 -->
<script type="module">
new Vue({
  el: '#app',
  template: '#app-template',
  vuetify: new Vuetify(),
  data: () => ({
    // 面包屑
    breadcrumbs: [
      {
        text: '<=$ pageId $=>',
        disabled: true,
      }
    ],
    isHelpPageDrawerShow: false,
    isTableZebraLineShown: true,
    // 表格相关数据
    isFormValid: true,
    requireRules: [
      v => !!v || 'This is required',
    ],
    constantCollection: {
    },
    serverSearchInput: {
      studentId: null,
      classId: null
    },
    searchInput: null,
    isTableLoading: true,
    tableDataFromBackend: [],
    headers: [
      {text: '操作', value: 'action', align: 'center', sortable: false, width: 250, class: 'fixed', cellClass: 'fixed'},
      {text: "ID", value: "id", width: 120, class: 'fixed', cellClass: 'fixed'},
      //===// <=% for f in tableAFields %=>
      {text: "<=$ f.COLUMN_COMMENT.split(\';\')[0] $=>", value: "<=$ f.COLUMN_NAME $=>", width: 120},//===// <=% endfor %=>
      {text: "操作者", value: "operationByUser", width: 120},
      {text: "操作时间", value: "operationAt", width: 250},
    ],
    isEditDrawerShow: false,
    editItem: {},
    isAddDrawerShow: false,
    addItem: {},
    tableButtonList: [
      {text: '修改', buttonType: 'edit', color: 'success', action: 'startUpdateItem'},
      {text: '删除', buttonType: 'delete', color: 'error', action: 'deleteItem'},
      { text: '<=$ nameB $=>', buttonType: 'path', color: 'warning', path: '<=$ middlePageId $=>', action: 'redirect'}
    ],
  }),
  computed: {
    isMobile() {
      return window.innerWidth < 600;
    },
    tableData() {
      return this.tableDataFromBackend;
    },
  },
  watch: {},
  async created() {
    await this.doUiAction('refreshTableData');
  },
  mounted() {},
  methods: {
    async doUiAction(uiActionId, uiActionData) {
      switch (uiActionId) {
        case 'refreshTableData':
          await this.refreshTableData();
          break;
        case 'startCreateItem':
          await this.clearItemData();
          await this.openCreateItemDialog();
          break;
        case 'createItem':
          await this.prepareCreateValidate();
          await this.confirmCreateItemDialog();
          await this.doCreateItem();
          await this.closeDrawerShow();
          await this.refreshTableData();
          break;
        case 'startUpdateItem':
          await this.prepareItemData(uiActionData);
          await this.openUpdateDialog();
          break;
        case 'updateItem':
          await this.prepareEditValidate();
          await this.confirmUpdateItemDialog();
          await this.doUpdateItem();
          await this.closeDrawerShow();
          await this.refreshTableData();
          break;
        case 'deleteItem':
          await this.confirmDeleteItemDialog();
          await this.doDeleteItem(uiActionData);
          await this.refreshTableData();
          break;
        case 'redirect':
          await this.doRedirect(uiActionData);
          break;
        default:
          console.error("[doUiAction] uiActionId not find", { uiActionId });
          break;
      }
    },
    /**
     * uiActionId:  refreshTableData
     * description: ✅获取表格数据
    */
    async refreshTableData() {
      this.isTableLoading = true;
      const serverSearchInput = _.pickBy(this.serverSearchInput, value=> !!value);
      const result = await window.jianghuAxios({
        data: {
          appData: {
            pageId: '<=$ pageId $=>',
            actionId: 'selectItemList',
            actionData: {},
            where: {},
            whereLike: serverSearchInput,
            orderBy: [{column: 'operationAt', order: 'desc'}]
          }
        }
      });
      const { rows } = result.data.appData.resultData;
      
      this.tableDataFromBackend = rows;
      this.isTableLoading = false;
    },

    /**
     * uiActionId:  startCreateItem
     * description: ✅获取表格数据
    */
    async clearItemData() {
      this.addItem = {};
    },

    async openCreateItemDialog() {
      this.isAddDrawerShow = true;
    },

    // 表单验证
    async prepareCreateValidate() {
      if (await this.$refs.createForm.validate() === false) {
        throw new Error("[prepareCreateValidate] false");
      }
    },
    async prepareEditValidate() {
      if (await this.$refs.editForm.validate() === false) {
        throw new Error("[prepareEditValidate] false");
      }
    },

    /**
     * uiActionId:  createItem
     * description: ✅获取表格数据
    */
    async confirmCreateItemDialog() {
      if (await window.confirmDialog({title: "新增", content: "确定新增吗？"}) === false) {
        throw new Error("取消");
      }
    },

    async doCreateItem() {
      const { id, ...data } = this.addItem;
      await window.vtoast.loading("新增数据");
      await window.jianghuAxios({
        data: {
          appData: {
            pageId: '<=$ pageId $=>',
            actionId: 'insertItem',
            actionData: data
          }
        }
      })
      await window.vtoast.success("新增数据成功");
    },

    async closeDrawerShow() {
      this.isEditDrawerShow = false;
      this.isAddDrawerShow = false;
    },

    /**
     * uiActionId:  startUpdateItem
     * description: ✅获取表格数据
    */
    async prepareItemData({item}) {
      this.editItem = {...item};
    },

    async openUpdateDialog() {
      this.isEditDrawerShow = true;
    },

    /**
     * uiActionId:  updateItem
     * description: ✅获取表格数据
    */
    async confirmUpdateItemDialog() {
      if (await window.confirmDialog({title: "修改", content: "确定修改吗？"}) === false) {
        throw new Error("取消");
      }
    },

    async doUpdateItem() {
      const { id, ...data } = this.editItem;
      await window.vtoast.loading("修改数据");
      await window.jianghuAxios({
        data: {
          appData: {
            pageId: '<=$ pageId $=>',
            actionId: 'updateItem',
            actionData: data,
            where: {id}
          }
        }
      })
      await window.vtoast.success("修改数据成功");
    },

    /**
     * uiActionId:  deleteItem
     * description: ✅获取表格数据
    */
    async confirmDeleteItemDialog() {
      if (await window.confirmDialog({title: "删除", content: "确定删除吗？"}) === false) {
        throw new Error("取消");
      }
    },

    async doDeleteItem({item}) {
      const { id } = item;
      await window.vtoast.loading("删除数据");
      await window.jianghuAxios({
        data: {
          appData: {
            pageId: '<=$ pageId $=>',
            actionId: 'deleteItem',
            actionData: {},
            where: { id: id }
          }
        }
      });
      await window.vtoast.success("删除数据成功");
    },

    /**
     * uiActionId:  doRedirect
     * description: ✅获取表格数据
    */
    async doRedirect({item, button}) {
      // todo：请在生成后将下列的 title 参数改成获取你要展示的字段，如 className
      if (button.path.startsWith('http')) {
        window.location.href = `${button.path}?<=$ primaryFieldA $=>=${item.<=$ primaryFieldA $=>}&title=${item.<=$ primaryFieldA $=>}`
      } else {
        window.location.href = `/${window.appInfo.appId}/page/${button.path}?<=$ primaryFieldA $=>=${item.<=$ primaryFieldA $=>}&title=${item.<=$ primaryFieldA $=>}`
      }
    },
    getConstantCollectionItemText(key, _value) {
      const constantCollectionItemFind = this.constantCollection[key].find(({value}) => value === _value);
      if(constantCollectionItemFind) {
        return constantCollectionItemFind.text;
      }
      return _value;
    }
  }
})
</script>

<style scoped>
</style>
{% endblock %}
